# -*- coding: utf-8 -*-
"""Voting Regressor HL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10gg88aVf17IVepPLQ66oSyE2L36_9kqf
"""

import pandas as pd
import xgboost as xgb
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split
!pip install scikit-optimize
from skopt import BayesSearchCV
from skopt.space import Real, Integer
from scipy.stats import pearsonr
#import pandas as pd
!pip install catboost
from catboost import CatBoostRegressor, Pool
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.model_selection import train_test_split

# Load the data
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00242/ENB2012_data.xlsx'
df = pd.read_excel(url)
df.columns = ['Relative_Compactness', 'Surface_Area', 'Wall_Area', 'Roof_Area', 'Overall_Height',
              'Orientation', 'Glazing_Area', 'Glazing_Area_Distribution', 'Heating_Load', 'Cooling_Load']

# Drop Cooling_Load from the dataframe
df.drop(['Cooling_Load'], axis=1, inplace=True)

# Split the data
train_data, test_data, train_target, test_target = train_test_split(df.iloc[:, :-1], df.iloc[:, -1],
                                                                    test_size=0.3, random_state=150)

# Create a CatBoost model
catboost_model = CatBoostRegressor(
    iterations=1000,  # Adjust as needed
    learning_rate=0.1,  # Adjust as needed
    depth=6,  # Adjust as needed
    loss_function='RMSE',
    random_state=150,
    verbose=200
)

# Fit the model
catboost_model.fit(train_data, train_target)

# Predict on the test set
test_preds = catboost_model.predict(test_data)
train_preds = catboost_model.predict(train_data)

# Calculate metrics
train_rmse = mean_squared_error(train_target, train_preds, squared=False)
test_rmse = mean_squared_error(test_target, test_preds, squared=False)
test_mse = mean_squared_error(test_target, test_preds)
test_mae = mean_absolute_error(test_target, test_preds)
test_r2 = r2_score(test_target, test_preds)
train_r2 = r2_score(train_target, train_preds)

# Print metrics
print(f"Test RMSE: {test_rmse:.2f}")
print(f"Test MSE: {test_mse:.2f}")
print(f"Test MAE: {test_mae:.2f}")
print(f"Test R^2: {test_r2:.2f}")
print(f"Train RMSE: {train_rmse:.2f}")
print(f"Train R^2: {train_r2:.2f}")



# Save the results in Google Colab
result_df_cat = pd.DataFrame({'y_test': test_target, 'y_predict': test_preds })
result_df_cat.to_excel('/content/Catboost_HL_predictions.xlsx', index=False)


# Provide a download link
from google.colab import files
files.download('/content/Catboost_HL_predictions.xlsx')

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/00242/ENB2012_data.xlsx'
df = pd.read_excel(url)
df.columns = ['Relative_Compactness', 'Surface_Area', 'Wall_Area', 'Roof_Area', 'Overall_Height',
              'Orientation', 'Glazing_Area', 'Glazing_Area_Distribution', 'Heating_Load', 'Cooling_Load']

# Drop Cooling_Load from the dataframe
df.drop(['Cooling_Load'], axis=1, inplace=True)
df.head()

train_data, test_data, train_target, test_target = train_test_split(df.iloc[:, :-1], df.iloc[:, -1],
                                                                    test_size=0.3, random_state=150)

test_target

train_data, test_data, train_target, test_target = train_test_split(df.iloc[:, :-1], df.iloc[:, -1],
                                                                    test_size=0.3, random_state=50)
xgb_model = xgb.XGBRegressor(
    objective='reg:squarederror',
    booster='gbtree',
    n_jobs=-1,
    random_state=150
)
search_space = {
    'learning_rate': Real(0.01, 0.1, prior='log-uniform'),
    'max_depth': Integer(3, 10),
    'n_estimators': Integer(50, 500),
    'gamma': Real(0, 1),
    'subsample': Real(0.5, 1),
    'colsample_bytree': Real(0.5, 1),
    'reg_alpha': Real(0, 10),
    'reg_lambda': Real(0, 10)
}

bayes_cv_tuner = BayesSearchCV(
    estimator=xgb_model,
    search_spaces=search_space,
    scoring='neg_mean_squared_error',
    n_iter=50,
    cv=5,
    verbose=1,
    random_state=150,
    n_jobs=-1
)

bayes_cv_tuner.fit(train_data, train_target)

xgb_opt = BayesSearchCV(
    xgb_model,
    search_space,
    cv=5,
    n_iter=50,
    n_jobs=-1,
    random_state=150
)
xgb_opt.fit(train_data, train_target)

# Print the best hyperparameters
print("Best hyperparameters found by Bayesian optimization search:")
print(xgb_opt.best_params_)

xgb_opt = BayesSearchCV(
    xgb_model,
    search_space,
    cv=5,
    n_iter=50,
    n_jobs=-1,
    random_state=150
)
xgb_opt.fit(train_data, train_target)

# Print the best hyperparameters
print("Best hyperparameters found by Bayesian optimization search:")
print(xgb_opt.best_params_)

xgb_model = xgb.XGBRegressor(
    objective='reg:squarederror',
    booster='gbtree',
    n_jobs=-1,
    random_state=150,
    **bayes_cv_tuner.best_params_
)
xgb_model.fit(train_data, train_target)
test_preds1 = xgb_model.predict(test_data)
train_preds1 = xgb_model.predict(train_data)

train_mse = mean_squared_error(train_target, train_preds1)
train_rmse = mean_squared_error(train_target, train_preds1, squared=False)
train_r2 = r2_score(train_target, train_preds)

test_rmse = mean_squared_error(test_target, test_preds1, squared=False)
test_mse = mean_squared_error(test_target, test_preds1)
test_mae = mean_absolute_error(test_target, test_preds1)
test_r2 = r2_score(test_target, test_preds1)

print(f"Test RMSE: {test_rmse:.2f}")
print(f"Test MSE: {test_mse:.2f}")
print(f"Test MAE: {test_mae:.2f}")
print(f"Test R^2: {test_r2:.2f}")
print(f"Train MSE: {train_mse:.2f}")
print(f"Train RMSE: {train_rmse:.2f}")
print(f"Train R^2: {train_r2:.2f}")

xgb_model = xgb.XGBRegressor(
    objective='reg:squarederror',
    booster='gbtree',
    n_jobs=-1,
    random_state=150,
    **bayes_cv_tuner.best_params_
)
xgb_model.fit(train_data, train_target)
test_preds1 = xgb_model.predict(test_data)
train_preds1 = xgb_model.predict(train_data)

train_mse = mean_squared_error(train_target, train_preds1)
train_rmse = mean_squared_error(train_target, train_preds1, squared=False)
train_r2 = r2_score(train_target, train_preds)

test_rmse = mean_squared_error(test_target, test_preds1, squared=False)
test_mse = mean_squared_error(test_target, test_preds1)
test_mae = mean_absolute_error(test_target, test_preds1)
test_r2 = r2_score(test_target, test_preds1)

print(f"Test RMSE: {test_rmse:.2f}")
print(f"Test MSE: {test_mse:.2f}")
print(f"Test MAE: {test_mae:.2f}")
print(f"Test R^2: {test_r2:.2f}")
print(f"Train MSE: {train_mse:.2f}")
print(f"Train RMSE: {train_rmse:.2f}")
print(f"Train R^2: {train_r2:.2f}")

from sklearn.ensemble import VotingRegressor

# Create Voting Regressor
#('xgb_model', model)

train_data, test_data, train_target, test_target = train_test_split(df.iloc[:, :-1], df.iloc[:, -1],
                                                                    test_size=0.3, random_state=150)
voting_regressor = VotingRegressor(
    estimators=[('catboost', catboost_model),('xgb', xgb_model)]
)

# Fit the Voting Regressor
voting_regressor.fit(train_data, train_target)

# Predict on the test set
y_pred_voting = voting_regressor.predict(test_data)

# Calculate and print the RMSE, MAE, and R-squared score on the test set
print("RMSE on test set (Voting Regressor): ", mean_squared_error(test_target, y_pred_voting, squared=False))
print("MAE on test set (Voting Regressor): ", mean_absolute_error(test_target, y_pred_voting))
print("R-squared on test set (Voting Regressor): ", r2_score(test_target, y_pred_voting))

# Save the results in Google Colab
result_df_Voting = pd.DataFrame({'y_test': test_target, 'y_predict': y_pred_voting })
result_df_Voting.to_excel('/content/Voting_HL_predictions.xlsx', index=False)


# Provide a download link
from google.colab import files
files.download('/content/Voting_HL_predictions.xlsx')

# Save the results in Google Colab
result_df_Voting1 = pd.DataFrame({'y_test': test_target, 'y_predict': y_pred_voting })
result_df_Voting1.to_excel('/content/Voting_HL1_predictions.xlsx', index=False)


# Provide a download link
from google.colab import files
files.download('/content/Voting_HL1_predictions.xlsx')



